title = "Function initializing state variables"
verbose_name = "function-init-state"
severity = "minor"
category = "antipattern"
weight = 40
description = """
Detects the immediate initialization of state variables through function calls that are not pure/constant, or that use non-constant state variable.

<!--more-->

## Exploit Scenario

```solidity
contract StateVarInitFromFunction {

    uint public v = set(); // Initialize from function (sets to 77)
    uint public w = 5;
    uint public x = set(); // Initialize from function (sets to 88)
    address public shouldntBeReported = address(8);

    constructor(){
        // The constructor is run after all state variables are initialized.
    }

    function set() public  returns(uint)  {
        // If this function is being used to initialize a state variable declared
        // before w, w will be zero. If it is declared after w, w will be set.
        if(w == 0) {
            return 77;
        }

        return 88;
    }
}
```
In this case, users might intend a function to return a value a state variable can initialize with, without realizing the context for the contract is not fully initialized. 
In the example above, the same function sets two different values for state variables because it checks a state variable that is not yet initialized in one case, and is initialized in the other. 
Special care must be taken when initializing state variables from an immediate function call so as not to incorrectly assume the state is initialized.


## Recommendation
Remove any initialization of state variables via non-constant state variables or function calls. If variables must be set upon contract deployment, locate initialization in the constructor instead.

## Learn more
[function-init-state](https://github.com/crytic/slither/wiki/Detector-Documentation#function-initializing-state) on Slither's wiki.
"""
