title = "Tainted array length assignment"
severity = "critical"
category = "antipattern"
weight = 80
description = """
Detects the direct assignment of an array's length.

<!--more-->

## Exploit Scenario

```solidity
contract A {
	uint[] testArray; // dynamic size array

	function f(uint usersCount) public {
		// ...
		testArray.length = usersCount;
		// ...
	}

	function g(uint userIndex, uint val) public {
		// ...
		testArray[userIndex] = val;
		// ...
	}
}
```
Contract storage/state-variables are indexed by a 256-bit integer.
The user can set the array length to `2**256-1` in order to index all storage slots. 
In the example above, one could call the function `f` to set the array length, then call the function `g` to control any storage slot desired. 
Note that storage slots here are indexed via a hash of the indexers; nonetheless, all storage will still be accessible and could be controlled by the attacker.

## Recommendation
Do not allow array lengths to be set directly set; instead, opt to add values as needed.
Otherwise, thoroughly review the contract to ensure a user-controlled variable cannot reach an array length assignment.

## Learn more
[controlled-array-length](https://github.com/crytic/slither/wiki/Detector-Documentation#array-length-assignment) on Slither's wiki.
"""
