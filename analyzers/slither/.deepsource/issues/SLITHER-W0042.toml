title = "Constant functions using assembly code"
severity = "major"
category = "antipattern"
weight = 60
description = """

Functions declared as `constant`/`pure`/`view` using assembly code.

`constant`/`pure`/`view` was not enforced prior to Solidity 0.5.
Starting from Solidity 0.5, a call to a `constant`/`pure`/`view` function uses the `STATICCALL` opcode, which reverts in case of state modification.

As a result, a call to an [incorrectly labeled function may trap a contract compiled with Solidity 0.5](https://solidity.readthedocs.io/en/develop/050-breaking-changes.html#interoperability-with-older-contracts).

<!--more-->

## Exploit Scenario

```solidity
contract Constant{
    uint counter;
    function get() public view returns(uint){
       counter = counter +1;
       return counter
    }
}
```
`Constant` was deployed with Solidity 0.4.25. Bob writes a smart contract that interacts with `Constant` in Solidity 0.5.0. 
All the calls to `get` revert, breaking Bob's smart contract execution.

## Recommendation
Ensure the attributes of contracts compiled prior to Solidity 0.5.0 are correct.

## Learn more
[constant-function-asm](https://github.com/crytic/slither/wiki/Detector-Documentation#constant-functions-using-assembly-code) on Slither's wiki.
"""
